In Java, a constructor is like a special method that gets called 
automatically when you create an object from a class. 
Its main job is to initialize (set up) the newly created object.

Think of it like building a house. When you build a house, 
you have a blueprint (class) that describes what the house will look like. 
The constructor is like the construction workers who 
follow the blueprint and actually build the house. They lay the foundation, 
put up the walls, install the windows, and so on. 
Similarly, a constructor sets up the initial state of an object, 
assigning values to its variables or performing other necessary setup tasks.

Here's a simple example:

```java
public class Car {
    // Variables to store car properties
    String make;
    String model;
    int year;

    // Constructor method
    public Car(String carMake, String carModel, int carYear) {
        // Initialize the variables with the provided values
        make = carMake;
        model = carModel;
        year = carYear;
    }

    // Other methods can be added here...
}
```

In this example, `Car` is a class representing a car. 
The constructor `Car(String carMake, String carModel, int carYear)` 
is used to create a new `Car` object. 
When you create a `Car` object like this:

```java
Car myCar = new Car("Toyota", "Corolla", 2020);
```

The constructor is automatically called with the values `"Toyota"`, `"Corolla"`, and `2020`, 
and it sets up the `myCar` object with those values.
-> constructors have the same name as class or structure 
-> constructors dont't have return type (not even void)
-> constructors are only called once, at object creation 
-> memory allocation happens when constructor is called 

types of constructors
-> non parameterized
-> parameterized 
-> copy constructor


1. **Non-parameterized Constructor**: This is like setting up a default state for something. 
Imagine you're building a house, and before you add any customizations,
you have a basic blueprint. The non-parameterized constructor sets up the object 
with default values or initializes it in a basic way without needing any specific information.

student(){
    sout("constructor is called)
}

2. **Parameterized Constructor**: Think of this like customizing your order. 
If you want your house to have specific features like a swimming pool, 
a garden, or a particular color, you'd specify those details. 
Similarly, a parameterized constructor allows you to initialize an object with 
specific values or configurations by passing parameters when you create an instance of the class.

student( string name ){
    this.name = name;
    sout("constructor is called)
}

3. **Copy Constructor**: Imagine you have a blueprint of a house, 
and you want to build another house exactly like it. 
A copy constructor does just that - it creates a new object by copying the values 
from an existing object. It's like making a duplicate with the same specifications.



In essence:

- Non-parameterized constructor: Default setup.
- Parameterized constructor: Customized setup.
- Copy constructor: Makes a duplicate with the same specifications as an existing object.