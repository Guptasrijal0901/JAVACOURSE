In Java, time complexity is used to describe the performance of 
an algorithm in terms of the time it takes to execute as the input size grows. 
Here are the common time complexities in Java along with examples:

1. O(1) - Constant Time:
   - Accessing an array element by index: `arr[i]`
   - Accessing a HashMap element by key: `map.get(key)`
   - Example:
     public int getFirstElement(int[] arr) {
         return arr[0];
     }
2. O(log n) - Logarithmic Time:
   - Binary search in a sorted array
   - Example:
     public int binarySearch(int[] arr, int target) {
         int left = 0;
         int right = arr.length - 1;
         
         while (left <= right) {
             int mid = left + (right - left) / 2;
             if (arr[mid] == target) {
                 return mid;
             } else if (arr[mid] < target) {
                 left = mid + 1;
             } else {
                 right = mid - 1;
             }
         }
         
         return -1;
     }
3. O(n) - Linear Time:
   - Iterating through an array or a list
   - Example:
     public int findMax(int[] arr) {
         int max = arr[0];
         for (int i = 1; i < arr.length; i++) {
             if (arr[i] > max) {
                 max = arr[i];
             }
         }
         return max;
     }
4. O(n log n) - Linearithmic Time:
   - Efficient sorting algorithms like Merge Sort and Quick Sort
   - Example (Merge Sort):
     public void mergeSort(int[] arr, int left, int right) {
         if (left < right) {
             int mid = left + (right - left) / 2;
             mergeSort(arr, left, mid);
             mergeSort(arr, mid + 1, right);
             merge(arr, left, mid, right);
         }
     }
5. O(n^2) - Quadratic Time:
   - Nested loops iterating over arrays or lists
   - Example:
     public void printPairs(int[] arr) {
         for (int i = 0; i < arr.length; i++) {
             for (int j = i + 1; j < arr.length; j++) {
                 System.out.println(arr[i] + ", " + arr[j]);
             }
         }
     }
6. O(2^n) - Exponential Time:
   - Recursive algorithms that solve problems by trying all possible combinations
   - Example (Fibonacci sequence using recursive approach):
     ```java
     public int fibonacci(int n) {
         if (n <= 1) {
             return n;
         }
         return fibonacci(n - 1) + fibonacci(n - 2);
     }
These are some of the common time complexities in Java. 
It's important to analyze the time complexity of algorithms 
to understand their performance characteristics and choose the 
most efficient approach for a given problem.