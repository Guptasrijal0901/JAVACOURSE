Sure! Hereâ€™s a list of time and space complexities for various sorting algorithms, 
along with simple explanations.

### 1. Bubble Sort
- **Time Complexity:**
  - Best: O(n) (when the array is already sorted)
  - Average: O(n^2)
  - Worst: O(n^2)
- **Space Complexity:**
  - O(1) (in-place sort)
  
### 2. Selection Sort
- **Time Complexity:**
  - Best: O(n^2)
  - Average: O(n^2)
  - Worst: O(n^2)
- **Space Complexity:**
  - O(1) (in-place sort)

### 3. Insertion Sort
- **Time Complexity:**
  - Best: O(n) (when the array is already sorted)
  - Average: O(n^2)
  - Worst: O(n^2)
- **Space Complexity:**
  - O(1) (in-place sort)
  
### 4. Merge Sort
- **Time Complexity:**
  - Best: O(n log n)
  - Average: O(n log n)
  - Worst: O(n log n)
- **Space Complexity:**
  - O(n) (not in-place, requires additional space for merging)
  
### 5. Quick Sort
- **Time Complexity:**
  - Best: O(n log n)
  - Average: O(n log n)
  - Worst: O(n^2) (when the pivot selection is poor)
- **Space Complexity:**
  - O(log n) (in-place sort with recursive stack space)
  
### 6. Heap Sort
- **Time Complexity:**
  - Best: O(n log n)
  - Average: O(n log n)
  - Worst: O(n log n)
- **Space Complexity:**
  - O(1) (in-place sort)
  
### 7. Counting Sort
- **Time Complexity:**
  - Best: O(n + k) (where `n` is the number of elements and `k` is the range of the input)
  - Average: O(n + k)
  - Worst: O(n + k)
- **Space Complexity:**
  - O(n + k) (additional space for the count array)
  
### 8. Radix Sort
- **Time Complexity:**
  - Best: O(nk) (where `n` is the number of elements and `k` is the number of digits)
  - Average: O(nk)
  - Worst: O(nk)
- **Space Complexity:**
  - O(n + k) (additional space for counting sort at each digit level)
  
### 9. Bucket Sort
- **Time Complexity:**
  - Best: O(n + k) (where `n` is the number of elements and `k` is the number of buckets)
  - Average: O(n + k)
  - Worst: O(n^2) (when all elements are placed in one bucket)
- **Space Complexity:**
  - O(n + k) (additional space for the buckets)

### Practical Examples in Java

#### Bubble Sort
```java
void bubbleSort(int[] array) {
    int n = array.length;
    for (int i = 0; i < n-1; i++) {
        for (int j = 0; j < n-i-1; j++) {
            if (array[j] > array[j+1]) {
                int temp = array[j];
                array[j] = array[j+1];
                array[j+1] = temp;
            }
        }
    }
}
```

#### Selection Sort
```java
void selectionSort(int[] array) {
    int n = array.length;
    for (int i = 0; i < n-1; i++) {
        int minIndex = i;
        for (int j = i+1; j < n; j++) {
            if (array[j] < array[minIndex]) {
                minIndex = j;
            }
        }
        int temp = array[minIndex];
        array[minIndex] = array[i];
        array[i] = temp;
    }
}
```

#### Insertion Sort
```java
void insertionSort(int[] array) {
    int n = array.length;
    for (int i = 1; i < n; i++) {
        int key = array[i];
        int j = i - 1;
        while (j >= 0 && array[j] > key) {
            array[j + 1] = array[j];
            j = j - 1;
        }
        array[j + 1] = key;
    }
}
```

#### Merge Sort
```java
void mergeSort(int[] array) {
    if (array.length < 2) return;
    int mid = array.length / 2;
    int[] left = Arrays.copyOfRange(array, 0, mid);
    int[] right = Arrays.copyOfRange(array, mid, array.length);
    mergeSort(left);
    mergeSort(right);
    merge(array, left, right);
}

void merge(int[] array, int[] left, int[] right) {
    int i = 0, j = 0, k = 0;
    while (i < left.length && j < right.length) {
        if (left[i] <= right[j]) {
            array[k++] = left[i++];
        } else {
            array[k++] = right[j++];
        }
    }
    while (i < left.length) {
        array[k++] = left[i++];
    }
    while (j < right.length) {
        array[k++] = right[j++];
    }
}
```

#### Quick Sort
```java
void quickSort(int[] array, int low, int high) {
    if (low < high) {
        int pi = partition(array, low, high);
        quickSort(array, low, pi-1);
        quickSort(array, pi+1, high);
    }
}

int partition(int[] array, int low, int high) {
    int pivot = array[high];
    int i = (low - 1);
    for (int j = low; j < high; j++) {
        if (array[j] <= pivot) {
            i++;
            int temp = array[i];
            array[i] = array[j];
            array[j] = temp;
        }
    }
    int temp = array[i + 1];
    array[i + 1] = array[high];
    array[high] = temp;
    return i + 1;
}
```

These sorting algorithms cover a range of time and space complexities, 
providing options for different use cases and input sizes.